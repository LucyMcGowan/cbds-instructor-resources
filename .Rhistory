gitbook()
library(bookdown)
gitbook()
gitbook(fig_caption = TRUE)
bookdown::gitbook()
bookdown::gitbook(fig_caption = TRUE, number_sections = TRUE,
self_contained = FALSE, lib_dir = "libs", pandoc_args = NULL,
..., template = "default", split_by = c("chapter",
"chapter+number", "section", "section+number",
"rmd", "none"), split_bib = TRUE, config = list(),
table_css = TRUE)
bookdown::gitbook(fig_caption = TRUE, number_sections = TRUE,
self_contained = FALSE, lib_dir = "libs", pandoc_args = NULL, template = "default", split_by = c("chapter",
"chapter+number", "section", "section+number",
"rmd", "none"), split_bib = TRUE, config = list(),
table_css = TRUE)
bookdown::gitbook
bookdown::gitbook()
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?rmarkdown::html_document()
library(ggplot2)
ggplot(midwest) + geom_point(aes(x=percbelowpoverty, y=percadultpoverty), color="dodgerblue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
# importing the data
champs <- read_csv(file = "./data/nba/championsdata.csv")
runners <- read_csv(file = "./data/nba/runnerupsdata.csv")
str(champs$Win)
class(champs$Win)
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
## bind the two data sets together
## and add a column that shows champions vs. runnerups call it rank
allteams <- bind_rows("Champion" = champs, "Runner" = runners, .id = "rank")
## and add a column that shows champions vs. runnerups call it rank
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
library(knitr)
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>% fct_relevel("Away"= "1") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
## does home has an advantage
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
mutate(Home = fct_relevel("Away" = 1)) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## grouping by the variable home
group_by(Home) %>%
mutate(Home = fct_relevel(Home, "Away" = 1)) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_relevel(Home, "Away" = 1)) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_relevel(Home, "Away" = "1")) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, Home = "1", Away = "0")) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, Home = "1", Away = "0"))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, "Home" = "1", "Away" = "0"))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, Home = 1, Away = 0)) %>%
## grouping by the variable home
group_by(Home)
champs <- champs %>%
mutate(Team = ifelse(Team == "Warriorrs","Warriors",Team)) %>%
mutate(Team = ifelse(Team == "'Heat'","Heat",Team)) %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home))
runners <- runners %>%
mutate(Team = ifelse(Team == "Warriorrs","Warriors",Team)) %>%
mutate(Team = ifelse(Team == "'Heat'","Heat",Team)) %>%
mutate(Win = as.factor(Win)) %>%
mutate(Home = as.factor(Home))
## bind the two data sets together
## and add a column that shows champions vs. runnerups call it rank
allteams <- bind_rows("Champion" = champs, "Runner" = runners, .id = "rank")
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, Home = 1, Away = 0)) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
mutate(Home = fct_recode(Home, Home = "1", Away = "0")) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS))
## does home has an advantage
allteams %>%
## first filtering so we only look at champion teams
filter(rank == "Champion") %>%
## changing factor levels so they mean better
mutate(Home = fct_recode(Home, Home = "1", Away = "0")) %>%
## grouping by the variable home
group_by(Home) %>%
## calculating the average of points scored
summarise(avg = mean(PTS)) %>%
## presenting the table using the knitr package
kable("html")
ggplot(data = filter(allteams, Year < 1983), aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = filter(allteams, Year < 1983), aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = filter(allteams, Year < 1983), aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = filter(allteams, Year < 1983), aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = filter(allteams, Year < 1983), aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP, fill = rank)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
scale_x_continuous(breaks = seq(1980, 1984, 1)) +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
scale_x_continuous() +
ggtitle("NBA Finals, 1980-82") +
ylab('Average Three Point Field Goals')
table(allteams$Year)
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
ggtitle("NBA Finals, 1980-2018") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("NBA Finals, 1980-2018") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("NBA Finals, 1980-2018") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP)) +
geom_bar(stat = 'identity') +
ggtitle("NBA Finals, 1980-2018") +
ylab('Average Three Point Field Goals')
ggplot(data = allteams, aes(x = Year, y = TP, fill = rank)) +
geom_bar(stat = 'identity') +
ggtitle("NBA Finals, 1980-2018") +
ylab('Average Three Point Field Goals')
p2 = ggplot(data = allteams, aes(x = Year, y = PTS, color = rank)) +
geom_point(size = 1) +
ggtitle('Points Per Game') +
ylab('Points')
p2
p2 + geom_smooth(method = 'loess',se=FALSE) +
ggplot(data = allteams, aes(x = Year, y = TP, color = rank)) +
geom_point(size = 1) +
geom_smooth(method = 'loess',se=FALSE) +
ggtitle("3's Per Game") +
ylab("3's") +
theme(legend.position="none")
p2 + geom_smooth(method = 'loess',se=FALSE)
p2 = ggplot(data = allteams, aes(x = Year, y = TP, color = rank)) +
geom_point(size = 1) +
ggtitle('Points Per Game') +
ylab('Points')
p2
p2 + geom_smooth(method = 'loess',se=FALSE)
p2 + geom_smooth(method = 'loess')
install.packages(devtools)
mybday <- dmy("20-Sep-1998")
library(lubridate)
mybday <- dmy("20-Sep-1998")
today <- Sys.Date()
mybday-today
today - mybday
(today - mybday)/365
as.period(today - mybday, unit = "years")
as.period(today - mybday, unit = "years")
as.period(today - mybday)
lubridate::new_interval(dob, today) / years(1)
lubridate::new_interval(today, mybday) / years(1)
lubridate::interval(today, mybday) / years(1)
interval(today, mybday) / years(1)
interval(mybday, today) / years(1)
time_length(today, mybday, unit = "year")
time_length(today-mybday, unit = "year")
time_length(today - mybday, unti = "year")
time_length(today - mybday, unit = "year")
age_calc <- function(){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = "year")
}
age_calc()
age_calc("1983-01-26")
age_calc <- function(bday){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = "year")
}
age_calc <- function(bday){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = "year")
}
age_calc("1983-01-26")
age_calc <- function(bday){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = "year")
return(dif)
}
age_calc <- function(bday){
age_calc("1983-01-26")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = unit)
return(dif)
}
age_calc("1983-01-26", unit="day")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = unit)
print(paste("Your age in ", unit, "s is", dif))
}
age_calc("1983-01-26", unit="day")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = unit)
print(paste("Your age in ", unit, "s is", dif, sep=""))
}
age_calc("1983-01-26", unit="day")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = unit)
print(paste("Your are ", dif, unit, "s", "old", sep=""))
}
age_calc("1983-01-26", unit="day")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = time_length(today - bday, unit = unit)
print(paste("Your are ", dif, " ", unit, "s ", "old", sep=""))
}
age_calc("1983-01-26", unit="day")
age_calc("1983-01-26", unit="year")
age_calc <- function(bday, unit = "day"){
warning("Please enter the date as 'yyyy-mm-dd'")
bday = ymd(bday)
today = Sys.Date()
dif = round(time_length(today - bday, unit = unit), 1)
print(paste("Your are ", dif, " ", unit, "s ", "old", sep=""))
}
age_calc("1983-01-26", unit="year")
age_calc("1982-05-10", unit = "hour")
hello <- function(name){
print(paste("Hello ", name, "!", sep = ""))
}
hello("Aboozar")
check_division <- function(num1, num2){
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, "."))
} else {
print(paste(num1, " is NOT divisible by ", num2, "."))
}
}
check_division(14,7)
check_division <- function(num1, num2){
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, "."))
} else {
print(paste(num1, " is NOT divisible by ", num2, ".", sep = ""))
}
}
check_division(14,7)
check_division <- function(num1, num2){
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, "."))
} else {
print(paste(num1, "is NOT divisible by", num2, ".", sep = ""))
}
}
check_division(14,7)
check_division <- function(num1, num2){
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, "."))
} else {
print(paste(num1, "is NOT divisible by", num2, ".", sep = ""))
}
}
check_division(14,7)
check_division(14,6)
check_division <- function(num1, num2){
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, ".", sep=""))
} else {
print(paste(num1, " is NOT divisible by ", num2, ".", sep = ""))
}
}
check_division(14,6)
check_division(14,7)
check_division <- function(num1, num2){
try(if(num1 < num2) stop("The first number should be larger than the second number."))
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, ".", sep=""))
} else {
print(paste(num1, " is NOT divisible by ", num2, ".", sep = ""))
}
}
check_division(14,7)
check_division(1,7)
check_division <- function(num1, num2){
if(num1 < num2) stop("The first number should be larger than the second number.")
else {
if (num1 %% num2 == 0) {
print(paste(num1, " is divisible by ", num2, ".", sep=""))
} else {
print(paste(num1, " is NOT divisible by ", num2, ".", sep = ""))
}
}
}
check_division(1,7)
check_division(7,1)
names <- c("Keisha", "Mohammed", "Jane", "Mathieu")
str_view(names, "M$")
str_view(names, "a$")
str_view(names, "M$")
library(strsplit)
strsplit("ghj")
string_split = strsplit("ghj", split = "")
strsplit("ghj", split = "")
stringr::str_split("jh")
stringr::str_split("jh", "")
rev(str_split("jh", ""))
rev(str_split("jh", "")[[1]])
paste(rev(str_split("jh", "")[[1]]))
paste(rev(str_split("jh", "")[[1]]), collapse = "")
str_split("book", "")
rev(c(1,2,3))
word_rev <- rev(word_decom[[1]])
word_decom <- str_split("book", "")
word_rev <- rev(word_decom[[1]])
word_rev
word_paste(word_decom_rev, collapse = "")
word_decom_rev <- rev(word_decom[[1]])
word_paste(word_decom_rev, collapse = "")
word_rev <- paste(word_decom_rev, collapse = "")
word_rev
word_reverse <- function(x){
word_decom <- str_split(x, "")
word_decom_rev <- rev(word_decom[[1]])
word_rev <- paste(word_decom_rev, collapse = "")
return(word_rev)
}
word_reverse("aboozar")
word_reverse("chromebook")
