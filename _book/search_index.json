[
["intro-r.html", "Course 5: Introduction to R Exercise 1: Installing and Uninstalling Packages Exercise 2: Using the script editor Exercise XX: Basic Commands in R Exercise XX: Creating a Data Frame Exercise XX: Creating Lists in R Exercise 4: Reverse a String Function Exercise 5: Other Short Exercises", " Course 5: Introduction to R One of the most important exercises for this course is to make students comfortable with RStudio and RStudio cloud. These are some of the exercises you can ask students to do during the class. Uploading files on RStudio.cloud Exporting (downloading) files on RStudio.cloud Renaming files in the Files section Deleting files in the Files section Creating new folders in the Files section Looking at the packages installed Looking at the environment through the Environment tab Looking at history through the History tab Browsing over the Console and the Terminal Creating a new R script file Creating a new R Markdown file Opening a new R script file Exercise 1: Installing and Uninstalling Packages Level: Easy Start with telling students what CRAN is. CRAN hosts additional packages that sit on top of the core (base) R software. While there are thousands of packages on CRAN, a lot of the packages are hosted on other hosting sites such as Github. In this exercise, we will ask students to install packages from both CRAN and Github. First, ask students to install the devtools package. Ask them to use the package name without the quotations as below: install.packages(devtools) # Error in install.packages : object &#39;devtools&#39; not found They will get an error saying the “object ‘devtools’ not found”. Remind them when we install packages, we have to put the package name in quotations. So the correct way is: install.packages(&quot;devtools&quot;) The package Devtools is hosted on CRAN, therefore, we don’t have to specify where the package is hosted. We just have to pass the name of the package to the function install.packages() to install it. Now ask them to load the package. Remind them that to load packages we use the following function: suppressWarnings(library(devtools)) Note that when we load packages we don’t necessarily have to use quotation marks. It is recommended, however, that to use quotations for both install.packages() and library() functions. The package devtools makes package development easier. One of the applications of the package is that it allows us to install packages that are not on CRAN. Now ask students to install the package knockknockjokes from github using. The link to the Github repo of the package is www.github.com/psolymos/KnockKnockJokes. Ask them how they are supposed to install a package from Github. suppressWarnings(devtools::install_github(&quot;psolymos/KnockKnockJokes&quot;)) ## Downloading GitHub repo psolymos/KnockKnockJokes@master ## from URL https://api.github.com/repos/psolymos/KnockKnockJokes/zipball/master ## Installing KnockKnockJokes ## &#39;/Library/Frameworks/R.framework/Resources/bin/R&#39; --no-site-file \\ ## --no-environ --no-save --no-restore --quiet CMD INSTALL \\ ## &#39;/private/var/folders/6c/94269x114tlc1x1c901c6_8m0000gn/T/Rtmp6OgbEa/devtools7a9a4e82a467/psolymos-KnockKnockJokes-5096f51&#39; \\ ## --library=&#39;/Library/Frameworks/R.framework/Versions/3.4/Resources/library&#39; \\ ## --install-tests ## Note that we have to specify where the package is hosted when we use the command install_github() from the package devtools. psolymos is the username of the user who developed the package and KnockKnockJokes is the name of the repository. Now ask students to load the package. suppressWarnings(library(KnockKnockJokes)) This package is very simple. It basically tells you knock knock jokes. You can ask students to browse through the package documentation on its Github repo and see what function they should use for a joke. Here’s one for a random joke: KnockKnock() ## Knock-knock! ## Who&#39;s there? ## Stan. ## Stan who? ## Stan back, I think I&#39;m going to sneeze! As an assignment (in class or at home), you can ask students to find an R package they find interesting and tell the class about it. Exercise 2: Using the script editor Level: Easy Ask students to go to the my_music_project on RStudio.cloud that they previously created. Ask them to create a new R script file in the folder code/tidy_code and save it as exploratory_analysis. Ask them to install and load the package dplyr in the beginning of the file. One of the nice things about RStudio is its keyboard shortcuts. One that is used a lot is Ctrl+Enter. Tell your students to type in 2 + 2 in the script file and while the cursor is on that line, hold the Ctrl (Command) key and then press Enter (or Return). What happens? Ctrl+Enter is used for running code without clicking on the Run tab. It makes running codes line by line a lot easier. As long as the cursor is somewhere on the line, Ctrl+Enter will run that line. You can also remind them that they can select and highlight multiple line and use Ctrl+Enter. For instance, ask them to type these two lines in an R script file and highlight both line together and then use Ctrl+Enter. x &lt;- 2 x + 3 ## [1] 5 Exercise XX: Basic Commands in R Level: Easy In this exercise, we will perform some basic commands in R on simple vectors. First, ask your students to create an vector object called ages that contains the following numbers: ages &lt;- c(22, 18, 20, 25, 22, 19, 32, 17) After giving them the above numbers and saving the object, ask your students to use an R function to find whether there is anybody who is older than 30 years old. Tell them you simply just need a TRUE/FALSE answer to this quesion. They can use the following command: any(ages &gt; 30) ## [1] TRUE Now, ask them to use an R function to find whether all ages are above 15. Again, remind them that the answer should be a simple TRUE/FALSE. They should use something like: all(ages &gt; 15) ## [1] TRUE You can further ask them to find which ages are larger than 20 For this, they can use the function which() to obtain the index of the element that is larger than 20 like below. a &lt;- which(ages &gt; 20) a ## [1] 1 4 5 7 ages[a] ## [1] 22 25 22 32 Exercise XX: Creating a Data Frame Level: Medium In this exercise, students will learn how to create a data frame. But since they’ve already learned how to create a repository on Github and push things to Github, ask them to create a repositiory there called movie_project. Further, ask them to clone the repository to an RStudio.cloud project with the same title. In the RStudio project, they should create all the necessary folders as they’ve learned before. We are going to create a data frame that has four columns: title, year, rating, and genre for the top 10 movies on imdb. Ask your students to go to the link here. Ask them to create an R script file in the folder called code and type their code there. Based on the information on the link, ask them to input the title, year, rating, and genre information for the top 10 movies in a data frame. Ask them to call the data frame movies_df They should do something like: title &lt;- c(&quot;The Shawshank Redemption&quot;, &quot;The Godfather&quot;, &quot;The Dark Knight&quot;, &quot;The Godfather: Part II&quot;, &quot;The Lord of the Rings: The Return of the King&quot;, &quot;Pulp Fiction&quot;, &quot;Schindler&#39;s List&quot;, &quot;12 Angry Men&quot;, &quot;Fight Club&quot;, &quot;The Lord of the Rings: The Fellowship of the Ring&quot;) year &lt;- c(1994, 1972, 2008, 1974, 2003, 1994, 1993, 1957, 1999, 2001) rating &lt;- c(9.3, 9.2, 9.0, 9.0, 8.9, 8.9, 8.9, 8.9, 8.8, 8.8) genre &lt;- c(&quot;Drama&quot;, &quot;Crime&quot;, &quot;Action&quot;, &quot;Crime&quot;, &quot;Adventure&quot;, &quot;Crime&quot;, &quot;Biography&quot;, &quot;Drama&quot;, &quot;Drama&quot;, &quot;Adventure&quot;) movies_df &lt;- data.frame(title, year, rating, genre) Now that they’ve created the data frame, ask them to show the first 4 rows of the data: head(movies_df, 4) ## title year rating genre ## 1 The Shawshank Redemption 1994 9.3 Drama ## 2 The Godfather 1972 9.2 Crime ## 3 The Dark Knight 2008 9.0 Action ## 4 The Godfather: Part II 1974 9.0 Crime Ask them to call the column that contains information about movie titles. movies_df$title ## [1] The Shawshank Redemption ## [2] The Godfather ## [3] The Dark Knight ## [4] The Godfather: Part II ## [5] The Lord of the Rings: The Return of the King ## [6] Pulp Fiction ## [7] Schindler&#39;s List ## [8] 12 Angry Men ## [9] Fight Club ## [10] The Lord of the Rings: The Fellowship of the Ring ## 10 Levels: 12 Angry Men Fight Club Pulp Fiction ... The Shawshank Redemption Ask them to find the “class” of the columns year and genre: class(movies_df$year) ## [1] &quot;numeric&quot; class(movies_df$genre) ## [1] &quot;factor&quot; Ask your student to find the difference between the maximum and the minimum rating in the data. dif &lt;- max(movies_df$rating) - min(movies_df$rating) dif ## [1] 0.5 Then ask them to find the dimension of the data frame: dim(movies_df) ## [1] 10 4 Now ask them to change the column called title to name: colnames(movies_df)[1] &lt;- &quot;name&quot; Without checking manually, ask them to see if the movie “Groundhog Day” is among the top 10 movies: any(movies_df$name == &quot;Groundhog Day&quot;) ## [1] FALSE Ask them to find the number of the movies are in the genre Drama: drama &lt;- which(movies_df$genre == &quot;Drama&quot;) length(drama) ## [1] 3 d &lt;- list(movies = c(&quot;m1&quot;, &quot;m2&quot;), states = 4) Exercise XX: Creating Lists in R Level: Easy The beauty of lists are that you can have elements with different sizes and structures in them. For this exercise, ask your students to create a list with three elements. The first element called places should be a vector of the states (provinces) or countries your students have been to. The next element called ice_cream should conain the name of their top two ice cream flavors. The last element called sports should contain their favorite sports. The list should be called about_me. The code should look like: about_me &lt;- list(places = c(&quot;New Mexico&quot;, &quot;Vermont&quot;, &quot;Washington&quot;, &quot;California&quot;), ice_creams = c(&quot;Vanilla&quot;, &quot;Chocolate&quot;), sports = c(&quot;Soccer&quot;)) Ask them to call the first element of the list: about_me[[1]] ## [1] &quot;New Mexico&quot; &quot;Vermont&quot; &quot;Washington&quot; &quot;California&quot; ## note that they can also call it by about_me[[&quot;places&quot;]] ## [1] &quot;New Mexico&quot; &quot;Vermont&quot; &quot;Washington&quot; &quot;California&quot; Now, ask then to add another sport that they like to the element sports. about_me[[&quot;sports&quot;]][[2]] &lt;- &quot;Volleyball&quot; Exercise 4: Reverse a String Function Level: Difficult Ask your students to write a function that takes a string and returns the reverse version of the string. So the function returns the string “book” as “koob”. This function is a simple version of a decoding function. Let’s decompose this problem. There are probably various ways to do this problem. One way to go about solving this problem is to decompose the words into characters. Then reverse the order of the characters and then paste them back together. The first step can be done using the str_split() function from the stringr package. library(stringr) word &lt;- &quot;book&quot; word_decom &lt;- str_split(&quot;book&quot;, &quot;&quot;) word_decom ## [[1]] ## [1] &quot;b&quot; &quot;o&quot; &quot;o&quot; &quot;k&quot; The word_decom object is a list and its first element is a vector of all the character that make up the word book. If we have a vector, we can use the function rev() to reverse the order of its elements. So rev(c(1,2,3)) will return 3 2 1. So to reverse the order of characters in the object word_decom we write word_decom_rev &lt;- rev(word_decom[[1]]) word_decom_rev ## [1] &quot;k&quot; &quot;o&quot; &quot;o&quot; &quot;b&quot; [[1]] is for calling the vector in the list. Now, we have the decomposed word reversed. But the result is a vector of characters and not a string. To create a string from all the characters, we can use the function paste() as we have used before. word_rev &lt;- paste(word_decom_rev, collapse = &quot;&quot;) word_rev ## [1] &quot;koob&quot; Your students now can combine all the steps and create the function. This would be the simplest form of the functino. word_reverse &lt;- function(x){ word_decom &lt;- str_split(x, &quot;&quot;) word_decom_rev &lt;- rev(word_decom[[1]]) word_rev &lt;- paste(word_decom_rev, collapse = &quot;&quot;) return(word_rev) } word_reverse(&quot;chromebook&quot;) ## [1] &quot;koobemorhc&quot; Exercise 5: Other Short Exercises Level: Easy to moderate Write a function that takes user’s name and returns “Hello, Name!” hello &lt;- function(name){ print(paste(&quot;Hello &quot;, name, &quot;!&quot;, sep = &quot;&quot;)) } Write a function that takes number 1 and number 2 and checks whether number 1 is divisible by number 2. If divisible, returns a message saying the first number is divisible by the second number and if not returns a message saying the first number is not divisible by the second number. check_division &lt;- function(num1, num2){ if (num1 %% num2 == 0) { print(paste(num1, &quot; is divisible by &quot;, num2, &quot;.&quot;, sep=&quot;&quot;)) } else { print(paste(num1, &quot; is NOT divisible by &quot;, num2, &quot;.&quot;, sep = &quot;&quot;)) } } In the function above, check to make sure number 1 is bigger than number 2. If not, halt and show a message that the first number should be larger than the second number. check_division &lt;- function(num1, num2){ if(num1 &lt; num2) stop(&quot;The first number should be larger than the second number.&quot;) else { if (num1 %% num2 == 0) { print(paste(num1, &quot; is divisible by &quot;, num2, &quot;.&quot;, sep=&quot;&quot;)) } else { print(paste(num1, &quot; is NOT divisible by &quot;, num2, &quot;.&quot;, sep = &quot;&quot;)) } } } "]
]
